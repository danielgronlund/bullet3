//this file is autogenerated using stringify.bat (premake --stringify) in the build folder of this project
static const char* rayCastKernelCL= \
"\n"
"typedef struct\n"
"{\n"
"	float4 m_from;\n"
"	float4 m_to;\n"
"} b3RayInfo;\n"
"\n"
"typedef struct\n"
"{\n"
"		float m_hitFraction;\n"
"		int	m_hitResult0;\n"
"		int	m_hitResult1;\n"
"		int	m_hitResult2;\n"
"		float4	m_hitPoint;\n"
"		float4	m_hitNormal;\n"
"} b3RayHit;\n"
"\n"
"typedef struct\n"
"{\n"
"	float4 m_pos;\n"
"	float4 m_quat;\n"
"	float4 m_linVel;\n"
"	float4 m_angVel;\n"
"\n"
"	unsigned int m_collidableIdx;\n"
"	float m_invMass;\n"
"	float m_restituitionCoeff;\n"
"	float m_frictionCoeff;\n"
"} Body;\n"
"\n"
"typedef struct Collidable\n"
"{\n"
"	int m_unused1;\n"
"	int m_unused2;\n"
"	int m_shapeType;\n"
"	int m_shapeIndex;\n"
"} Collidable;\n"
"\n"
"bool sphere_intersect(float4 spherePos,  float radius, float4 rayFrom, float4 rayTo)\n"
"{\n"
"    // rs = ray.org - sphere.center\n"
"  float4 rs = rayFrom - spherePos;\n"
"  rs.w = 0.f;\n"
"	float4 rayDir = (rayTo-rayFrom);\n"
"	rayDir.w = 0.f;\n"
"	rayDir = normalize(rayDir);\n"
"\n"
"  float B = dot(rs, rayDir);\n"
"  float C = dot(rs, rs) - (radius * radius);\n"
"  float D = B * B - C;\n"
"\n"
"    if (D > 0.0)\n"
"    {\n"
"        float t = -B - sqrt(D);\n"
"        if ( (t > 0.0))// && (t < isect.t) )\n"
"        {\n"
"            return true;//isect.t = t;\n"
"		}\n"
"	}\n"
"	return false;\n"
"}\n"
"\n"
"__kernel void rayCastKernel(  \n"
"	int numRays, \n"
"	const __global b3RayInfo* rays, \n"
"	__global b3RayHit* hits, \n"
"	const int numBodies, \n"
"	__global Body* bodies,\n"
"	__global Collidable* collidables)\n"
"{\n"
"\n"
"	bool hit=false;\n"
"\n"
"	int i = get_global_id(0);\n"
"	if (i<numRays)\n"
"	{\n"
"		hits[i].m_hitFraction = 1.f;\n"
"\n"
"		float4 rayFrom = rays[i].m_from;\n"
"		float4 rayTo = rays[i].m_to;\n"
"		\n"
"		for (int b=0;b<numBodies;b++)\n"
"		{\n"
"					\n"
"				float4 pos = bodies[b].m_pos;\n"
"	//		float4 orn = bodies[b].m_quat;\n"
"				\n"
"				float radius = 1.f;\n"
"	\n"
"				if (sphere_intersect(pos,  radius, rayFrom, rayTo))\n"
"					hit = true;\n"
"		}\n"
"		if (hit)\n"
"					hits[i].m_hitFraction = 0.f;\n"
"	}\n"
"}\n"
"\n"
;
